#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import division, absolute_import, unicode_literals

from grako import graken, Parser
from grako.util import re, RE_FLAGS  # noqa

__version__ = (2016, 7, 5, 0, 7, 13, 1)

__all__ = ['SqlParser']

KEYWORDS = set([
    'FROM',
    'SELECT',
    'WHERE',
])


class SqlParser(Parser):
    def __init__(self):
        super(SqlParser, self).__init__(
            whitespace=re.compile('[\\s]+', RE_FLAGS | re.DOTALL),
            eol_comments_re='--.*?$', keywords=KEYWORDS)

    @graken
    def _start_(self):
        self._query_specification_()
        self._check_eof()

    @graken
    def _whitespace_(self):
        self._pattern(r'\s+')

    @graken
    def _identifier_(self):
        self._pattern(r'[a-z]\w*')
        self._check_name()

    @graken
    def _decimal_(self):
        self._integer_()
        with self._optional():
            self._token('.')
            with self._optional():
                self._integer_()

    @graken
    def _integer_(self):
        self._pattern(r'\d+')

    @graken
    def _schema_name_(self):
        with self._optional():
            self._identifier_()
            self._token('.')
        self._identifier_()

    @graken
    def _qualified_name_(self):
        with self._optional():
            self._schema_name_()
            self._token('.')
        self._identifier_()

    @graken
    def _column_name_list_(self):
        self._identifier_()
        with self._optional():

            def block0():
                self._token(',')
                self._identifier_()
            self._positive_closure(block0)

    @graken
    def _value_expression_(self):
        with self._choice():
            with self._option():
                self._decimal_()
            with self._option():
                self._column_reference_()
            self._error('no available options')

    @graken
    def _column_reference_(self):
        with self._optional():
            self._qualifier_()
            self._token('.')
        self._identifier_()

    @graken
    def _qualifier_(self):
        with self._choice():
            with self._option():
                self._qualified_name_()
            with self._option():
                self._identifier_()
            self._error('no available options')

    @graken
    def _query_specification_(self):
        self._token('SELECT')
        self._select_list_()
        self._table_expression_()

    @graken
    def _select_list_(self):
        self._derived_column_()
        with self._optional():

            def block0():
                self._token(',')
                self._derived_column_()
            self._positive_closure(block0)

    @graken
    def _derived_column_(self):
        self._value_expression_()

        def block0():
            self._as_clause_()
        self._closure(block0)

    @graken
    def _as_clause_(self):
        with self._optional():
            self._token('AS')
        self._identifier_()

    @graken
    def _table_expression_(self):
        self._token('FROM')
        self._table_reference_()
        with self._optional():

            def block0():
                self._token(',')
                self._table_reference_()
            self._positive_closure(block0)
        with self._optional():
            self._where_clause_()

    @graken
    def _table_reference_(self):
        self._qualified_name_()
        with self._optional():
            self._correlation_specification_()

    @graken
    def _correlation_specification_(self):
        with self._optional():
            self._token('AS')
        self._identifier_()
        with self._optional():
            self._token('(')
            self._column_name_list_()
            self._token(')')

    @graken
    def _where_clause_(self):
        self._token('WHERE')
        self._comparison_predicate_()

    @graken
    def _comparison_predicate_(self):
        self._value_expression_()
        self._comp_op_()
        self._value_expression_()

    @graken
    def _comp_op_(self):
        with self._choice():
            with self._option():
                self._token('=')
            with self._option():
                self._token('<>')
            with self._option():
                self._token('<')
            with self._option():
                self._token('>')
            with self._option():
                self._token('<=')
            with self._option():
                self._token('>=')
            self._error('expecting one of: < <= <> = > >=')
