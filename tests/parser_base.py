#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__version__ = (2016, 7, 4, 19, 38, 4, 0)

__all__ = [
    'UnknownParser',
    'UnknownSemantics',
    'main'
]

KEYWORDS = set([
    'FROM',
    'SELECT',
    'WHERE',
])


class UnknownParser(Parser):
    def __init__(self,
                 whitespace=re.compile('[\\s]+', RE_FLAGS | re.DOTALL),
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=True,
                 left_recursion=True,
                 keywords=KEYWORDS,
                 namechars='',
                 **kwargs):
        super(UnknownParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            keywords=keywords,
            namechars=namechars,
            **kwargs
        )

    @graken()
    def _start_(self):
        self._query_specification_()
        self.name_last_node('select')

        self.ast._define(
            ['select'],
            []
        )

    @graken('Ident')
    def _identifier_(self):
        self._pattern(r'[a-z]\w*')
        self._check_name()

    @graken('int')
    def _integer_(self):
        self._pattern(r'\d+')

    @graken('Value')
    def _value_expression_(self):
        with self._choice():
            with self._option():
                self._integer_()
            with self._option():
                self._identifier_()
            self._error('no available options')

    @graken('Select')
    def _query_specification_(self):
        self._token('SELECT')
        self._select_list_()
        self._table_expression_()

    @graken('columns')
    def _select_list_(self):

        def sep0():
            self._token(',')

        def block0():
            self._derived_column_()
        self._positive_closure(block0, prefix=sep0)

    @graken('derived')
    def _derived_column_(self):
        self._value_expression_()
        with self._optional():
            self._identifier_()

    @graken('tables')
    def _table_expression_(self):
        self._token('FROM')

        def sep0():
            self._token(',')

        def block0():
            self._table_reference_()
        self._positive_closure(block0, prefix=sep0)

    @graken('table')
    def _table_reference_(self):
        self._identifier_()
        with self._optional():
            self._identifier_()


class UnknownSemantics(object):
    def start(self, ast):
        return ast

    def identifier(self, ast):
        return ast

    def integer(self, ast):
        return ast

    def value_expression(self, ast):
        return ast

    def query_specification(self, ast):
        return ast

    def select_list(self, ast):
        return ast

    def derived_column(self, ast):
        return ast

    def table_expression(self, ast):
        return ast

    def table_reference(self, ast):
        return ast


def main(
        filename,
        startrule,
        trace=False,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=True,
        left_recursion=True,
        **kwargs):

    with open(filename) as f:
        text = f.read()
    whitespace = whitespace or re.compile('[\\s]+', RE_FLAGS | re.DOTALL)
    parser = UnknownParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard,
        ignorecase=ignorecase,
        **kwargs)
    return ast

if __name__ == '__main__':
    import json
    ast = generic_main(main, UnknownParser, name='Unknown')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
